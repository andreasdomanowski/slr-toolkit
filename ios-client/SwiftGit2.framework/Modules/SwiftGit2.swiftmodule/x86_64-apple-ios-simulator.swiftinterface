// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.1 (swiftlang-1200.0.41 clang-1200.0.32.8)
// swift-module-flags: -target x86_64-apple-ios8.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name SwiftGit2
import Clibgit2
import Foundation
import Swift
@_exported import SwiftGit2
public struct OID {
  public init?(string: Swift.String)
  public init(_ oid: Clibgit2.git_oid)
  public let oid: Clibgit2.git_oid
}
extension OID : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension OID : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: SwiftGit2.OID, rhs: SwiftGit2.OID) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct Remote : Swift.Hashable {
  public let name: Swift.String
  public let URL: Swift.String
  public init(_ pointer: Swift.OpaquePointer)
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SwiftGit2.Remote, b: SwiftGit2.Remote) -> Swift.Bool
}
public struct CheckoutStrategy : Swift.OptionSet {
  public init(nilLiteral: ())
  public init(rawValue value: Swift.UInt)
  public init(_ strategy: Clibgit2.git_checkout_strategy_t)
  public static var allZeros: SwiftGit2.CheckoutStrategy {
    get
  }
  public var rawValue: Swift.UInt {
    get
  }
  public var gitCheckoutStrategy: Clibgit2.git_checkout_strategy_t {
    get
  }
  public static var None: SwiftGit2.CheckoutStrategy
  public static var Safe: SwiftGit2.CheckoutStrategy
  public static var Force: SwiftGit2.CheckoutStrategy
  public static var RecreateMissing: SwiftGit2.CheckoutStrategy
  public static var AllowConflicts: SwiftGit2.CheckoutStrategy
  public static var RemoveUntracked: SwiftGit2.CheckoutStrategy
  public static var RemoveIgnored: SwiftGit2.CheckoutStrategy
  public static var UpdateOnly: SwiftGit2.CheckoutStrategy
  public static var DontUpdateIndex: SwiftGit2.CheckoutStrategy
  public static var NoRefresh: SwiftGit2.CheckoutStrategy
  public static var SkipUnmerged: SwiftGit2.CheckoutStrategy
  public static var UseOurs: SwiftGit2.CheckoutStrategy
  public static var UseTheirs: SwiftGit2.CheckoutStrategy
  public static var DisablePathspecMatch: SwiftGit2.CheckoutStrategy
  public static var SkipLockedDirectories: SwiftGit2.CheckoutStrategy
  public static var DontOverwriteIgnored: SwiftGit2.CheckoutStrategy
  public static var ConflictStyleMerge: SwiftGit2.CheckoutStrategy
  public static var ConflictStyleDiff3: SwiftGit2.CheckoutStrategy
  public static var DontRemoveExisting: SwiftGit2.CheckoutStrategy
  public static var DontWriteIndex: SwiftGit2.CheckoutStrategy
  public typealias Element = SwiftGit2.CheckoutStrategy
  public typealias ArrayLiteralElement = SwiftGit2.CheckoutStrategy
  public typealias RawValue = Swift.UInt
}
public enum Credentials {
  case `default`
  case sshAgent
  case plaintext(username: Swift.String, password: Swift.String)
  case sshMemory(username: Swift.String, publicKey: Swift.String, privateKey: Swift.String, passphrase: Swift.String)
}
public typealias CheckoutProgressBlock = (Swift.String?, Swift.Int, Swift.Int) -> Swift.Void
final public class Repository {
  final public class func create(at url: Foundation.URL) -> Swift.Result<SwiftGit2.Repository, Foundation.NSError>
  final public class func at(_ url: Foundation.URL) -> Swift.Result<SwiftGit2.Repository, Foundation.NSError>
  final public class func clone(from remoteURL: Foundation.URL, to localURL: Foundation.URL, localClone: Swift.Bool = false, bare: Swift.Bool = false, credentials: SwiftGit2.Credentials = .default, checkoutStrategy: SwiftGit2.CheckoutStrategy = .Safe, checkoutProgress: SwiftGit2.CheckoutProgressBlock? = nil) -> Swift.Result<SwiftGit2.Repository, Foundation.NSError>
  public init(_ pointer: Swift.OpaquePointer)
  @objc deinit
  final public let pointer: Swift.OpaquePointer
  final public let directoryURL: Foundation.URL?
  final public func object(_ oid: SwiftGit2.OID) -> Swift.Result<SwiftGit2.ObjectType, Foundation.NSError>
  final public func blob(_ oid: SwiftGit2.OID) -> Swift.Result<SwiftGit2.Blob, Foundation.NSError>
  final public func commit(_ oid: SwiftGit2.OID) -> Swift.Result<SwiftGit2.Commit, Foundation.NSError>
  final public func tag(_ oid: SwiftGit2.OID) -> Swift.Result<SwiftGit2.Tag, Foundation.NSError>
  final public func tree(_ oid: SwiftGit2.OID) -> Swift.Result<SwiftGit2.Tree, Foundation.NSError>
  final public func object<T>(from pointer: SwiftGit2.PointerTo<T>) -> Swift.Result<T, Foundation.NSError> where T : SwiftGit2.ObjectType
  final public func object(from pointer: SwiftGit2.Pointer) -> Swift.Result<SwiftGit2.ObjectType, Foundation.NSError>
  final public func allRemotes() -> Swift.Result<[SwiftGit2.Remote], Foundation.NSError>
  final public func remote(named name: Swift.String) -> Swift.Result<SwiftGit2.Remote, Foundation.NSError>
  final public func fetch(_ remote: SwiftGit2.Remote) -> Swift.Result<(), Foundation.NSError>
  final public func references(withPrefix prefix: Swift.String) -> Swift.Result<[SwiftGit2.ReferenceType], Foundation.NSError>
  final public func reference(named name: Swift.String) -> Swift.Result<SwiftGit2.ReferenceType, Foundation.NSError>
  final public func localBranches() -> Swift.Result<[SwiftGit2.Branch], Foundation.NSError>
  final public func remoteBranches() -> Swift.Result<[SwiftGit2.Branch], Foundation.NSError>
  final public func localBranch(named name: Swift.String) -> Swift.Result<SwiftGit2.Branch, Foundation.NSError>
  final public func remoteBranch(named name: Swift.String) -> Swift.Result<SwiftGit2.Branch, Foundation.NSError>
  final public func allTags() -> Swift.Result<[SwiftGit2.TagReference], Foundation.NSError>
  final public func tag(named name: Swift.String) -> Swift.Result<SwiftGit2.TagReference, Foundation.NSError>
  final public func HEAD() -> Swift.Result<SwiftGit2.ReferenceType, Foundation.NSError>
  final public func setHEAD(_ oid: SwiftGit2.OID) -> Swift.Result<(), Foundation.NSError>
  final public func setHEAD(_ reference: SwiftGit2.ReferenceType) -> Swift.Result<(), Foundation.NSError>
  final public func checkout(strategy: SwiftGit2.CheckoutStrategy, progress: SwiftGit2.CheckoutProgressBlock? = nil) -> Swift.Result<(), Foundation.NSError>
  final public func checkout(_ oid: SwiftGit2.OID, strategy: SwiftGit2.CheckoutStrategy, progress: SwiftGit2.CheckoutProgressBlock? = nil) -> Swift.Result<(), Foundation.NSError>
  final public func checkout(_ reference: SwiftGit2.ReferenceType, strategy: SwiftGit2.CheckoutStrategy, progress: SwiftGit2.CheckoutProgressBlock? = nil) -> Swift.Result<(), Foundation.NSError>
  final public func commits(in branch: SwiftGit2.Branch) -> SwiftGit2.CommitIterator
  final public func add(path: Swift.String) -> Swift.Result<(), Foundation.NSError>
  final public func commit(tree treeOID: SwiftGit2.OID, parents: [SwiftGit2.Commit], message: Swift.String, signature: SwiftGit2.Signature) -> Swift.Result<SwiftGit2.Commit, Foundation.NSError>
  final public func commit(message: Swift.String, signature: SwiftGit2.Signature) -> Swift.Result<SwiftGit2.Commit, Foundation.NSError>
  final public func diff(for commit: SwiftGit2.Commit) -> Swift.Result<SwiftGit2.Diff, Foundation.NSError>
  final public func status() -> Swift.Result<[SwiftGit2.StatusEntry], Foundation.NSError>
  public static func isValid(url: Foundation.URL) -> Swift.Result<Swift.Bool, Foundation.NSError>
}
public protocol ObjectType {
  static var type: Clibgit2.git_otype { get }
  var oid: SwiftGit2.OID { get }
  init(_ pointer: Swift.OpaquePointer)
}
extension ObjectType {
  public static func == (lhs: Self, rhs: Self) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
}
public struct Signature {
  public let name: Swift.String
  public let email: Swift.String
  public let time: Foundation.Date
  public let timeZone: Foundation.TimeZone
  public init(name: Swift.String, email: Swift.String, time: Foundation.Date = Date(), timeZone: Foundation.TimeZone = TimeZone.autoupdatingCurrent)
  public init(_ signature: Clibgit2.git_signature)
}
extension Signature : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
  public static func == (a: SwiftGit2.Signature, b: SwiftGit2.Signature) -> Swift.Bool
}
public struct Commit : SwiftGit2.ObjectType, Swift.Hashable {
  public static var type: Clibgit2.git_otype
  public let oid: SwiftGit2.OID
  public let tree: SwiftGit2.PointerTo<SwiftGit2.Tree>
  public let parents: [SwiftGit2.PointerTo<SwiftGit2.Commit>]
  public let author: SwiftGit2.Signature
  public let committer: SwiftGit2.Signature
  public let message: Swift.String
  public init(_ pointer: Swift.OpaquePointer)
  public var hashValue: Swift.Int {
    get
  }
}
public struct Tree : SwiftGit2.ObjectType, Swift.Hashable {
  public static var type: Clibgit2.git_otype
  public struct Entry : Swift.Hashable {
    public let attributes: Swift.Int32
    public let object: SwiftGit2.Pointer
    public let name: Swift.String
    public init(_ pointer: Swift.OpaquePointer)
    public init(attributes: Swift.Int32, object: SwiftGit2.Pointer, name: Swift.String)
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: SwiftGit2.Tree.Entry, b: SwiftGit2.Tree.Entry) -> Swift.Bool
  }
  public let oid: SwiftGit2.OID
  public let entries: [Swift.String : SwiftGit2.Tree.Entry]
  public init(_ pointer: Swift.OpaquePointer)
  public var hashValue: Swift.Int {
    get
  }
}
extension Tree.Entry : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public struct Blob : SwiftGit2.ObjectType, Swift.Hashable {
  public static var type: Clibgit2.git_otype
  public let oid: SwiftGit2.OID
  public let data: Foundation.Data
  public init(_ pointer: Swift.OpaquePointer)
  public var hashValue: Swift.Int {
    get
  }
}
public struct Tag : SwiftGit2.ObjectType, Swift.Hashable {
  public static var type: Clibgit2.git_otype
  public let oid: SwiftGit2.OID
  public let target: SwiftGit2.Pointer
  public let name: Swift.String
  public let tagger: SwiftGit2.Signature
  public let message: Swift.String
  public init(_ pointer: Swift.OpaquePointer)
  public var hashValue: Swift.Int {
    get
  }
}
public struct StatusEntry {
  public var status: SwiftGit2.Diff.Status
  public var headToIndex: SwiftGit2.Diff.Delta?
  public var indexToWorkDir: SwiftGit2.Diff.Delta?
  public init(from statusEntry: Clibgit2.git_status_entry)
}
public struct Diff {
  public var deltas: [SwiftGit2.Diff.Delta]
  public struct Delta {
    public static var type: Clibgit2.git_otype
    public var status: SwiftGit2.Diff.Status
    public var flags: SwiftGit2.Diff.Flags
    public var oldFile: SwiftGit2.Diff.File?
    public var newFile: SwiftGit2.Diff.File?
    public init(_ delta: Clibgit2.git_diff_delta)
  }
  public struct File {
    public var oid: SwiftGit2.OID
    public var path: Swift.String
    public var size: Swift.Int64
    public var flags: SwiftGit2.Diff.Flags
    public init(_ diffFile: Clibgit2.git_diff_file)
  }
  public struct Status : Swift.OptionSet {
    public init(rawValue: Swift.UInt32)
    public let rawValue: Swift.UInt32
    public static var current: SwiftGit2.Diff.Status
    public static var indexNew: SwiftGit2.Diff.Status
    public static var indexModified: SwiftGit2.Diff.Status
    public static var indexDeleted: SwiftGit2.Diff.Status
    public static var indexRenamed: SwiftGit2.Diff.Status
    public static var indexTypeChange: SwiftGit2.Diff.Status
    public static var workTreeNew: SwiftGit2.Diff.Status
    public static var workTreeModified: SwiftGit2.Diff.Status
    public static var workTreeDeleted: SwiftGit2.Diff.Status
    public static var workTreeTypeChange: SwiftGit2.Diff.Status
    public static var workTreeRenamed: SwiftGit2.Diff.Status
    public static var workTreeUnreadable: SwiftGit2.Diff.Status
    public static var ignored: SwiftGit2.Diff.Status
    public static var conflicted: SwiftGit2.Diff.Status
    public typealias Element = SwiftGit2.Diff.Status
    public typealias ArrayLiteralElement = SwiftGit2.Diff.Status
    public typealias RawValue = Swift.UInt32
  }
  public struct Flags : Swift.OptionSet {
    public init(rawValue: Swift.UInt32)
    public let rawValue: Swift.UInt32
    public static var binary: SwiftGit2.Diff.Flags
    public static var notBinary: SwiftGit2.Diff.Flags
    public static var validId: SwiftGit2.Diff.Flags
    public static var exists: SwiftGit2.Diff.Flags
    public typealias Element = SwiftGit2.Diff.Flags
    public typealias ArrayLiteralElement = SwiftGit2.Diff.Flags
    public typealias RawValue = Swift.UInt32
  }
  public init(_ pointer: Swift.OpaquePointer)
}
public protocol ReferenceType {
  var longName: Swift.String { get }
  var shortName: Swift.String? { get }
  var oid: SwiftGit2.OID { get }
}
extension ReferenceType {
  public static func == (lhs: Self, rhs: Self) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
}
public struct Reference : SwiftGit2.ReferenceType, Swift.Hashable {
  public let longName: Swift.String
  public let shortName: Swift.String?
  public let oid: SwiftGit2.OID
  public init(_ pointer: Swift.OpaquePointer)
  public var hashValue: Swift.Int {
    get
  }
}
public struct Branch : SwiftGit2.ReferenceType, Swift.Hashable {
  public let longName: Swift.String
  public let name: Swift.String
  public let commit: SwiftGit2.PointerTo<SwiftGit2.Commit>
  public var shortName: Swift.String? {
    get
  }
  public var oid: SwiftGit2.OID {
    get
  }
  public var isLocal: Swift.Bool {
    get
  }
  public var isRemote: Swift.Bool {
    get
  }
  public init?(_ pointer: Swift.OpaquePointer)
  public var hashValue: Swift.Int {
    get
  }
}
public enum TagReference : SwiftGit2.ReferenceType, Swift.Hashable {
  case lightweight(Swift.String, SwiftGit2.OID)
  case annotated(Swift.String, SwiftGit2.Tag)
  public var longName: Swift.String {
    get
  }
  public var name: Swift.String {
    get
  }
  public var oid: SwiftGit2.OID {
    get
  }
  public var shortName: Swift.String? {
    get
  }
  public init?(_ pointer: Swift.OpaquePointer)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol PointerType : Swift.Hashable {
  var oid: SwiftGit2.OID { get }
  var type: Clibgit2.git_otype { get }
}
extension PointerType {
  public static func == (lhs: Self, rhs: Self) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
}
public enum Pointer : SwiftGit2.PointerType {
  case commit(SwiftGit2.OID)
  case tree(SwiftGit2.OID)
  case blob(SwiftGit2.OID)
  case tag(SwiftGit2.OID)
  public var oid: SwiftGit2.OID {
    get
  }
  public var type: Clibgit2.git_otype {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension Pointer : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public struct PointerTo<T> : SwiftGit2.PointerType where T : SwiftGit2.ObjectType {
  public let oid: SwiftGit2.OID
  public var type: Clibgit2.git_otype {
    get
  }
  public init(_ oid: SwiftGit2.OID)
  public var hashValue: Swift.Int {
    get
  }
}
public var libGit2ErrorDomain: Swift.String
@_hasMissingDesignatedInitializers public class CommitIterator : Swift.IteratorProtocol, Swift.Sequence {
  public typealias Iterator = SwiftGit2.CommitIterator
  public typealias Element = Swift.Result<SwiftGit2.Commit, Foundation.NSError>
  @objc deinit
  public func next() -> SwiftGit2.CommitIterator.Element?
}
